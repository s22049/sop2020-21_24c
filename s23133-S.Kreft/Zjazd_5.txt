Zjazd 5 

Każdy proces ma swój numer PID (Process ID)
-Każdy proces ma swój proces nadrzędny/parent (poza procesem init - PID=1)
-Każdy proces może sprawdzić swój PPID (Parent Process ID)
-Jeśli proces A tworzy nowy proces B to automatycznie proces A staje się parentem procesu B i proces B może sprawdzić że jego PPID=PID_A
-Jeśli proces się kończy to przerywane są wszystkie jego procesy potomne
-Proces nadrzędny powinien poczekać na zakończenie wszystkich swoich procesów potomnych przed swoim własnym zakończeniem


1.
Napisz program, który przedstawi swój numer PID, oraz PPID.

#include <stdio.h>
#include <unistd.h>

int main()
{
    printf("PID: %d\tPPID: %d\n", getpid(), getppid());

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
2.

Niech program z poprzedniego zadania będzie dodatkowo, po wypisaniu, czekał na standardowym wejściu na dane od użytkownika.

#include <stdio.h>
#include <unistd.h>

int main()
{
    char input[255];
    printf("PID: %d\tPPID: %d\n", getpid(), getppid());
    
    scanf("%s", input);

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------
3.
Uruchom program z poprzedniego zadania - nic nie podawaj na wejściu (program powinien czekać w nieskończoność).
Za pomocą komendy kill zamknij ten proces korzystając z PID wypisanego przez niego.

- Znajac PID naszego procesu uzywamy komendy: kill [PID]
- Proces zostaje zakonczony
-----------------------------------------------------------------------------------------------------------------------------------------
4.
Napisz program, który uruchomi podproces za pomocą komendy fork. Niech proces rodzica oczekuje na proces potomka. 
Oba procesy powinny wypisać swój PID oraz PPID.

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

int main()
{
    int input;
    

    pid_t pid = fork();

    if(pid > 0)
    {
        printf("R PID: %d\tR PPID: %d\n", getpid(), getppid());
        waitpid(0, &input, 0);
        printf("Rodzic zakonczyl czekanie na swoje dziecko\n");
        /*rodzic*/
    }
    else if(pid == 0)
    {
        printf("D PID: %d\tD PPID: %d\n", getpid(), getppid());
        /* dziecko */
    }
    else
    {
        printf("NIe udalo sie utworzyc dziecka\n");
        /*dziecka nie udalo sie utworzyc */
    }

    return 0;
}
------------------------------------------------------------------------------------------------------------------------
5.
Napisz program, który będzie obliczał w 2 procesach:

    Proces rodzica: Wartość sumy liczb od 0 do wartości zadanej jako pierwszy argument wykonania programu.
    Proces potomny: Wypisujący liczby nieparzyste od 1 do wartości zadanej jako pierwszy argument wykonania programu.
    Program powinien wypisać wyniki w kolejności takiej, że najpierw wypisze wynik proces potomny, a następnie proces rodzica. Nie korzystaj z komendy sleep.

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

int main(int argc, char** argv)
{
    int input;
    int liczba = atoi(argv[1]);
    pid_t pid = fork();
    if(pid > 0)
    {
        int suma = 0;
        int i = 0;
        for(i = 0; i <= liczba; i++)
        {
            suma+=i;
        }
        waitpid(0, &input, 0);
        printf("Suma z rodzica: %d\n", suma);
    }
    else if(pid == 0)
    {
        int i=0;
        for(i = 1; i <= liczba; i = i+2)
        {
            printf("Dziecko, liczba nieparzysta: %d\n", i);
        }
    }
    else
    {
        printf("Nie udalo sie utworzyc dziecka\n");
       
    }

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
6.
Napisz program, który uruchomi 100 procesów w taki sposób, że każdy kolejny potomek stworzy potomka. 
Niech każdy proces poczeka na zakończenie procesu potomka. 
Możesz korzystać z oczekiwania na wejście lub z komendy sleep i zobacz czy drzewko procesów jest takie jak się spodziewasz (możesz w tym celu ograniczyć liczbę procesów do 10).
Zobacz podpowiedź na początku tej strony.

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main()
{
    int i = 0;
    for(i=0; i<10;i++)
    {   pid_t pid = fork();
        
        if(pid>0)
        {
            wait(NULL);
            break;
        }
        else
        {
             printf("i=%d PID:%d\tPPID:%d\n", i,getpid(), getppid());
        }
       
    }
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.
Napisz program, który uruchomi 100 procesów potomnych w taki sposób, że będzie jeden rodzic i 100 potomków. 
Proces główny niech oczekuje na zakończenie wszystkich procesów potomnych.

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main()
{
    int i = 0;
    pid_t masterPid = getpid();
    printf("Masterpid: %d\n", masterPid);
    fflush(stdout);
    for(i=0; i<10;i++)
    {   
        if(getpid() == masterPid)
        {
            if(fork()== 0)
            {
                printf("i=%d PID:%d\tPPID:%d\n", i,getpid(), getppid());
                fflush(stdout);
            }
        }
        
    }
    if(masterPid == getpid())
    {
        int status = 0;
        waitpid(0, &status, 0);
        printf("Rodzic zaczekal na zakonczenie swoich dzieci i sam sie zakonczyl\n");
        fflush(stdout);
    }

    return 0;
}
------------------------------------------------------------------------------------------------------------------------------
