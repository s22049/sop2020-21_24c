20210513 - 20210527
---------------------------------------
03 Skrypty Bash 2
---------------------------------------
Regex, tablice, for, while, if, case, funkcje, watki (wait)

1. if - conditional expressions
if [ condition ]; then
	.....
elif condition
	.....
else
	.....
fi

!!!WARNING! do not use [[ condition ]] it is kind of "baszyzm" in other shell it will not work properly! it is a trap

Excercise 1.
*1.1. This script is checking if we give more than one parameter

#!/usr/bin/env bash
#conditional expressions
# $# - zmienna pokazujaca ilosc przekazanych argumentow

if [ $# -gt 1 ]
then
    echo $1;
else
    echo "Nie podano parametrow."
fi 

*1.2. This script is checking if file config.cfg exists. If yes it run it, if no it is checking if we give parameter. If nothing from above situation happend it will display "Error".

#!/usr/bin/env bash

 #-gt greater -ge greaterorequal
 #-e  if exist

if [ -e config.cfg ]; then
    ./config.cfg
elif [ $# -gt 0 ]; then   
    ./$1
else
    echo "Error." 
fi

REMEMBER ABOUT!!! fg, bg, ps commands

*1.3. Checking if file name has .sh extension, if no, it has to add extension .sh

WARNING!! This what we type in first line in bash (in command line) is the value of $0
EXAMPLE:
bash-5.0$ ../scr.sh
...
$0= ../scr.sh

#!/usr/bin/env bash
# $0 ściezka do pliku
#basename - To extract filename

FILENAME=$(basename $0)
NAME="${FILENAME%.*}" #obetnij wszystko od ostatniej kropki dalej
EXT="${FILEMANE##*.}" #obetnij wszystko w lewo od ostatniej kropki
echo "$FILENAME $EXT $NAME"

if [[ ${EXT} != "sh" ]]; then
    mv $0 ${0}.sh

RESULT:
bash-5.0$ ./IF3.sc
IF3.sc  IF3

now file IF3.sc is IF3.sc.sh

*1.4.1. Checking if in current directory exists more than 5 files, if yes it shoult show information that the directory has 5 files.

ls - show list of files
wc word count - counts characters, words and lines

#!/usr/bin/env bash
X=$(ls -l | grep -e "^-" | wc -l) #linia do zliczenia liczby wierszy
# "^-" znajduje wszystkie znaki - zaczynajace linie
#wc sluzy do zliczania linii, znakow i slow
if [ ${X} -gt 5 ]; then
    echo "Tak, w biezacym katalogu jest wiecej niz 5 plikow";
fi

RESULT:
bash-5.0$ ./IF4.1.sh
Tak, w biezacym katalogu jest wiecej niz 5 plikow
bash-5.0$ ls -l
total 64
-rw-r--r--@ 1 ala  staff    0 11 kwi 13:10 5
-rwxr--r--  1 ala  staff  178 13 maj 22:46 IF1_instrukcjaWarunkowaIF.sh
-rwxr--r--  1 ala  staff  178 13 maj 22:54 IF2.sh
-rwxr--r--  1 ala  staff  356 13 maj 23:10 IF3.sc.sh
-rw-r--r--  1 ala  staff  354 13 maj 23:14 IF3.sh
-rwxr--r--  1 ala  staff  273 11 kwi 13:13 IF4.1.sh
-rwxr--r--@ 1 ala  staff   92 23 kwi 21:07 PETLE1.sh
-rw-r--r--  1 ala  staff   92 23 kwi 22:59 PETLE2.sh
-rwxr--r--  1 ala  staff   32 13 maj 22:59 config.cfg
bash-5.0$

2. loop - while, for, until

for i in a b c 1 2 3; do
echo $i
done

for ((i = 1; i < 10; i++)); do echo $i; done

while [ true ]; do
  echo "to się nigdy nie skończy..."
  sleep 1
done

EXAMPLE1:
bash-5.0$ for i in {1..8}; do echo $1; done







bash-5.0$ WHY IS IT BLACK? BUT LINES EXISTS? BECAUSE I USE $1 instead of $i!!!

EXAMPLE2:
bash-5.0$ for i in {1..2}; do echo $i; done
1
2
bash-5.0$ CORRECT!

EXAMPLE3:
bash-5.0$ for i in {1..4..2}; do echo $i; done
1
3
bash-5.0$ CORRECT!

EXAMPLE4:
bash-5.0$ seq 1 4 22 #from 1 to 22 every 4
1
5
9
13
17
21
bash-5.0$ for i in `seq 1 4 22`; do echo "sprawdzam: $i"; done
sprawdzam: 1
sprawdzam: 5
sprawdzam: 9
sprawdzam: 13
sprawdzam: 17
sprawdzam: 21

*2.1. Script, which will show numbers from 10 to 1 every 2. 
#!/usr/bin/env bash

#wypisuje od 1 do 10 co dwie
for i in {10..1..2}; do
    echo $i;
done

RESULT:
bash-5.0$ ./PETLE1.sh
10
8
6
4
2
bash-5.0$

*2.2. Write script which will print all script parameters (remember, parameter can has spacebars inside) written in quotation marks.
#!/usr/bin/env bash

#creating an array args
args=("$@")
for ((i=0; i < $#; i++)); do
    echo "argument $((i)): ${args[$i]}";
done

RESULT:
bash-5.0$ ./PETLE2.sh Ala "Ala ma" "Ala ma kota" kot lubi Ale
argument 0: Ala
argument 1: Ala ma
argument 2: Ala ma kota
argument 3: kot
argument 4: lubi
argument 5: Ale
bash-5.0$

TYPES OF ARRAYS:

TABLICA=(element1 "element 2" element\ 3)
echo ${TABLICA[1]}
echo ${TABLICA[*]}
echo ${TABLICA[@]}
echo ${TABLICA[*]}
echo "${!TABLICA[@]}  ${!TABLICA[*]}"
echo ${#TABLICA[@]}

Result:
bash-5.0$ chmod u+x TABLICEtest.sh
bash-5.0$ ./TABLICEtest.sh
element 2
element1 element 2 element 3
element1 element 2 element 3
element1 element 2 element 3
0 1 2  0 1 2
3

We cant export arrays as variable. But they looks like variable.

*2.3. Napisz skrypt, który wypisze listę plików i katalogów bieżącego katalogu poprzedzając każdą nazwę pliku tekstem "Patrzcie Państwo, oto plik: ". Podpowiedź internal field separator

#!/usr/bin/env bash

files=$(ls)
#Internal Fields Separator - The value of IFS, which typically includes the space, tab, and the newline by default, can be printed with the command printf %q "$IFS" or cat -A <<< "$IFS" in Bash.
#The shell treats each character of $IFS as a delimiter!! -jako separator
IFS=$'\n'
for i in  $files; do
    echo "Patrzcie Panstwo, oto plik:  $i";
done

RESULT:
bash-5.0$ ./PETLE3iTABLICE.sh
Patrzcie Panstwo, oto plik:  5
Patrzcie Panstwo, oto plik:  IF1_instrukcjaWarunkowaIF.sh
Patrzcie Panstwo, oto plik:  IF2.sh
Patrzcie Panstwo, oto plik:  IF3.sc.sh
Patrzcie Panstwo, oto plik:  IF3.sh
Patrzcie Panstwo, oto plik:  IF4.1.sh
Patrzcie Panstwo, oto plik:  PETLE1.sh
Patrzcie Panstwo, oto plik:  PETLE2.sh
Patrzcie Panstwo, oto plik:  PETLE3iTABLICE.sh
Patrzcie Panstwo, oto plik:  config.cfg
bash-5.0$

*2.4 Napisz skrypt, który dla każdego pliku w bieżącym katalogu, który ma rozszerzenie .c wykona taką komendę:
cc (tunazwapliku) -o (tunazwaplikubezrozszerzenia)
Oczywiście zamień (tunazwapliku) na nazwę pliku, a (tunazwaplikubezrozszerzenia) na nazwę pliku z obciętym rozszerzeniem. Jeśli chcesz przykładowe pliki do potestowania, oto one:-)

#!/usr/bin/env bash

files=$(ls)
    for f in $files; do
        NAME="${f%.*}" #obetnij wszystko od ostatniej kropki w prawo
        EXT="${f##*.}" #obetnij wszystko w lewo od ostatniej kropki
        X="${f}afterCompilation" #dopisywanie nowej nazwy pliku
        if [[ ${EXT} == "c" ]]; then
        echo "$f $X"
            cc ${f} -o $X;
        fi
    done

RESULT:
bash-5.0$ ./PETLE4iTABLICE.sh
Hello.c Hello.cafterCompilation
Succes.c Succes.cafterCompilation
bash-5.0$ ./Hello.cafterCompilation
Hello, World!bash-5.0$ ./Succes.cafterCompilation
You are lucky! Your program is working properly!

*2.4.1. Napisz skrypt, który wczyta listę plików do wypisania z wiersza poleceń, a następnie wypisze ich zawartości raz w kolejności od początku do końca, a raz na odwrót. Podpowiedzi:
-indeksy ujemne tablicy mogą się przydać
-można wyliczać wartości wyrażeń arytmetycznych (i+1)
-przyda się for

CODE:
echo "wypisuje w kolejności rosnącej"
TABLICA=("${@}")
for((f=0; f<$#; f++)); do
    cat ${TABLICA[${f}]};
done

echo "Teraz od tyłu:"

for((f=$#-1; f>=0; f--)); do
    cat ${TABLICA[${f}]};
done

RESULT:
bash-5.0$ ./PETLE5_1iTABLICE.sh Reksio5_1.txt Pies5_1.txt
wypisuje w kolejności rosnącej
Hello! My name is Reksio!
I have no name!
Teraz od tyłu:
I have no name!
Hello! My name is Reksio!

We can use also negative arguments of table:
like array[-1] it means the last element
array[-2] one before last


3. functions!!!

function witaj {
  echo "Funkcja ta jest nieuprzejma i nie wita $1"
  # tu opcjonalnie: return 0
}

Argumenty są liczone tak jak przy zwykłym skrypcie ($1, $2, ...).

Funkcję wywołuje się po prostu przez nazwę.

Jeśli chcesz zaimportować plik z funkcjami, to można to zrobić tak:

. ./plikDoZaimportowania
Tak właściwie, to taki plik zostanie dołączony w tym miejscu do bieżącego skryptu.

3.1. Przygotuj skrypt z funkcją która będzie wypisywała tekst pokolorowany na zadany kolor. Niech funkcja ta przyjmuje dwa argumenty - tekst i kolor. Zobacz man console_codes oraz składnię komendy echo (lub przykład z poprzednich zajęć).

CODE:
function colouring_function () {
    #biały *0*
    #zółty *33*
    #czerwony *31*
    #cyan *35*
    #green *32*
    TEXT=${@:2}
    COLOUR=$1
    NC='\e[0m'
    echo -e "   \e[${COLOUR}m${TEXT}${NC}"
    return 0;
}

echo "using variable:"
VAR=$(colouring_function 33 UZYWAJAC ZMIENNEJ);
echo $VAR

echo "colouring_function:"
colouring_function 35 BEZ PODAWANIA W KOMENDZIE BASH

RESULT:
bash-5.0$ ./FUNKCJE1.sh 32 UCZE SIE BASHA
using variable:
UZYWAJAC ZMIENNEJ #it is yellow
colouring_function:
   BEZ PODAWANIA W KOMENDZIE BASH #it is pink

3.2. Przygotuj wyrażenie regularne sprawdzające czy tekst jest kodem pocztowym (cały tekst, czyli zaczyna się od cyfry i kończy się cyfrą).

CODE:
#!/usr/bin/env bash
function FibbonacciSequence (){
    N=$1
    if [ ${N} = "0" ]; then
        echo "0"
        return 0;
    elif [ ${N} = "1" ]; then
        echo "1" 
        return 1;
    else
        N1=$[${N}-1]
        N2=$[${N}-2]
        A1=$(FibbonacciSequence ${N1})
        A2=$(FibbonacciSequence ${N2})
        R=$[${A1}+${A2}]
        echo "${R}"
        return  ${R};
    fi
}

FibbonacciSequence 15

The limit of this operation is TIME! The highese number we want to substitute as argument of function, the more time the operation will take time!
And we must by very carefour, to not create endless recursion!!! I did it.

REGULAR EXPRESSIONS:
1. Przygotuj wyrażenie regularne, które będzie sprawdzało, czy tekst jest poprawnie napisanym polskim imieniem (od wielkiej litery, może mieć tylko litery i zawierać polskie znaki).

[A-Z][a-z]{1,}

2. Przygotuj wyrażenie regularne sprawdzające czy tekst jest kodem pocztowym (cały tekst, czyli zaczyna się od cyfry i kończy się cyfrą).

[0-9]{2}-[0-9]{3}

3. Przygotuj wyrażenie regularne sprawdzające e-mail.

.+@.+\..+

FINAL EXCERCISE:
Napisz skrypt który będzie pobierał jeden argument z linii komend i wypisywał informację o tym, czy jest to imie, kod pocztowy, czy też email. Na przykład
./coto Janusz
imię
./coto 68-221
kod pocztowy
./coto 'muniek+spam@gmail.com'
email

CODE:

WhatIsIt=$1
#!/usr/bin/env bash
if [[ "${WhatIsIt}" =~ ^[A-Z][a-z]{1,}$ ]]; then
    echo "imie"
elif [[ ${WhatIsIt} =~ ^[0-9]{2}-[0-9]{3}$ ]]; then
    echo "kod pocztowy"
elif [[ ${WhatIsIt} =~ ^.+@.+\..+$ ]]; then
    echo "email"
else
    echo "bledny argument"
fi
 

^....$ - is to use regex in bash
regex101.com - useful site

RESULT:
bash-5.0$ ./FINALEXCERCISE.sh Ala
imie
bash-5.0$ ./FINALEXCERCISE.sh dasdas@dasdas.sa
email
bash-5.0$ ./FINALEXCERCISE.sh 44-333
kod pocztowy
